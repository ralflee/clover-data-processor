package service_test

import (
	"clover-data-processor/app/model"
	"clover-data-processor/app/service/mocks"
	"clover-data-processor/app/wire"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

//mocks are generated by following commands
//mockery -name=RawDataSource -dir=./app/service -output=./app/service/mocks -filename=mock_raw_data_source.go
//mockery -name=DataParser -dir=./app/service -output=./app/service/mocks -filename=mock_data_parser.go
//mockery -name=DataRepository -dir=./app/service -output=./app/service/mocks -filename=mock_data_repository.go
func TestDataImportService(t *testing.T) {
	repository := mocks.DataRepository{}
	parser := mocks.DataParser{}
	dataSource := mocks.RawDataSource{}

	dataImportService := wire.InitDataImportService(&dataSource, &parser, &repository)

	t.Run("ImportDataSuccess", func(t *testing.T) {
		specPaths := make([]string, 1)
		specPaths[0] = "../../test/specs/aaa.csv"

		dataPaths := make([]string, 1)
		dataPaths[0] = "../../test/data/aaa_2020_06_18.txt"

		dataSource.On("GetSpecPath", mock.Anything).Return(specPaths)
		dataSource.On("GetDataPath", mock.Anything, mock.Anything).Return(dataPaths)

		parser.On("ConstructSpec", mock.Anything).Return(&model.Spec{}, nil)

		records := make([]*model.Record, 1)
		records[0] = &model.Record{}
		parser.On("ConstructRecords", mock.Anything, mock.Anything).Return(records, nil)

		repository.On("CheckTableExists", mock.Anything).Return(false)
		repository.On("CreateTable", mock.Anything).Return(nil)
		repository.On("Insert", mock.Anything, mock.Anything).Return(nil)

		err := dataImportService.ImportData()
		assert.Nil(t, err)
	})
}
